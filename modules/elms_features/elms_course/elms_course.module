<?php
//define what a root organizational unit is
define('ELMS_ROOT_TYPE', 'course');
include_once('elms_course.features.inc');

/**
 * Implementation of hook_nodeapi().
 */
function elms_course_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      //when a course is inserted we automatically create a version for it
      if ($node->type == ELMS_ROOT_TYPE) {
        //verify that we weren't told this is just a listing
        if ($node->field_listing_only[0]['value'] == NULL) {
          _elms_course_create_default($node);
        }
      }
    break;
  }
}

//create a course version off of default settings
function _elms_course_create_default($course) {
  global $user;
  //creating a blank node
  $group = new stdClass();
  //setting this flag avoids a conflict with instructional outline auto creation
  $group->default_version = 1;
  $group->uid = $user->uid;
  //this title will change anyway on node insert
  $group->title = $course->title .' Sandbox';
  $group->type = ELMS_GROUP_TYPE;
  $group->status = 1;
  $group->log = 'ELMS Course: Default settings used to create an initial course sandbox';
	//don't need to bloat revisions table
  $group->revision = 0;
  $group->field_footer[0]['value'] = variable_get('site_footer','');
  //Set the course reference
  $group->field_course_ref[0]['nid'] = $course->nid;
  //og settings
  $group->theme = variable_get('elms_helper_default_theme', 'chamfer');
  $group->og_theme = variable_get('elms_helper_default_theme', 'chamfer');
  $group->og_private = 1;
  //set the description to the title of the course
  $group->og_description = $course->field_course_title[0]['value'];
  $group->field_lesson_count[0]['value'] = 15;
  //save node
  node_save($group);
  //create the book root now that we have the group node finished
  if (module_exists('elms_course_content')) {
    _elms_course_content_create_root($group, 'default');
  }
}

/**
 * Implementation of hook_requirement_dashboard_provider().
 */
function elms_course_requirement_dashboard_provider() {
  $dashboards['elms_course'] = array(
    'title' => t('Course Status'),
    'path' => 'node/%node/course_status',
  );
  return $dashboards;
}

/**
 * Implementation of hook_dashboard_requirements().
 */
function elms_course_dashboard_requirements($provider) {
  switch ($provider) {
    case 'og':
	  $group = og_get_group_context();
	  //get a list of users per role
	  $counts = array(
	    'instructor' => 0,
		'student' => 0,
		'teaching assistant' => 0,
	  );
	  $result = db_query("SELECT r.name AS rolename FROM {users} AS u JOIN {og_users_roles} AS ur ON u.uid=ur.uid JOIN {role} AS r ON ur.rid=r.rid WHERE r.name IN('instructor', 'student', 'teaching assistant') AND status=1");
	  while ($val = db_fetch_array($result)) {
		$counts[$val['rolename']]++;
	  }
	  //loop through and render all this info
	  foreach ($counts as $rolename => $count) {
        $requirements['og_active_'. str_replace(' ', '', $rolename) .'_count'] = array(
          'title' => t('@account', array('@account' => ucwords($rolename .'s'))), 
          'value' => $count,
          'severity' => REQUIREMENT_INFO,
        );
	  }
	break;
    case 'elms_course':
      $node = node_load(arg(1));
      //add name
      $requirements['name'] = array(
        'title' => t('Name'), 
        'value' => $node->field_course_name[0]['value'],
        'severity' => REQUIREMENT_INFO,
      );
      //add title
      $requirements['title'] = array(
        'title' => t('Title'), 
        'value' => $node->field_course_title[0]['value'],
        'severity' => REQUIREMENT_INFO,
      );
      //add description
      $requirements['description'] = array(
        'title' => t('Description'), 
        'value' => $node->field_description[0]['value'],
        'severity' => REQUIREMENT_INFO,
      );
      //get a high level version count
      $version_count = _elms_course_get_version_count($node->nid);
      if ($version_count == 0) {
        $version_warning = REQUIREMENT_WARNING;
      }
      else {
        $version_warning = REQUIREMENT_INFO;  
      }
      $requirements['version_count'] = array(
        'title' => t('# of Versions'), 
        'value' => $version_count,
        'severity' => $version_warning,
      );
      //get counts for all workflow states
      $states = workflow_get_states();
      //make a count of each workflow state if it's greater then 0
      foreach ($states as $sid => $state) {
	    $count = _elms_course_get_version_count($node->nid, $sid);
	    if ($count != 0) {
	      $requirements['workflow_count_'. $sid] = array(
            'title' => t($state),
            'value' => $count,
            'severity' => REQUIREMENT_INFO,
          );
        }
      }
    break;
    //add system level data
    case 'system': 
      $course_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='%s'", ELMS_ROOT_TYPE));
      $requirements['total_courses'] = array(
        'title' => t('Total Courses'),
	    'value' => $course_count,
        'severity' => REQUIREMENT_INFO,
      );
    break;
  }
  return $requirements;
}

//helper function to count number of versions for a course per workflow state
function _elms_course_get_version_count($nid, $sid = FALSE) {
  if ($sid) {
    $count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {content_type_version} as ctv ON n.nid=ctv.nid JOIN {workflow_node} AS wn ON wn.nid=n.nid WHERE type='%s' AND field_course_ref_nid=%d AND wn.sid=%d", ELMS_GROUP_TYPE, $nid, $sid)); 
  }
  else {
    $count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {content_type_version} as ctv ON n.nid=ctv.nid WHERE type='%s' AND field_course_ref_nid=%d", ELMS_GROUP_TYPE, $nid));
  }
  return $count;
}
/**
 * Implementation of hook_menu().
 */
function elms_course_menu() {
  $items['node/%node/add-'. ELMS_GROUP_TYPE] = array(
    'title' => t('Add New Version'),
    'page callback' => 'elms_course_add_redirect',
    'page arguments' => array(1),
    'access callback' => 'elms_course_add_redirect_access',
    'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
  );
	return $items;
}

//redirect to the noderef url
function elms_course_add_redirect($node) {
  drupal_goto('node/add/'. ELMS_GROUP_TYPE .'/'. $node->nid);
}
//redirect access
function elms_course_add_redirect_access($node) {
  if(node_access('create', ELMS_GROUP_TYPE) && $node->type == ELMS_ROOT_TYPE) {
    return TRUE;
	}
	else {
    return FALSE;
	}
}
/**
 * Implementation of hook_menu_alter().
 */
function elms_course_menu_alter(&$items) {
  if (isset($items['node/%node/course_status'])) {
    $items['node/%node/course_status']['access callback'] = 'elms_course_status_access';
    $items['node/%node/course_status']['access arguments'] = array(1);
  }
}

/**
 * Access callback: API just defines a basic criteria for access to this page, this allows us to make sure this is a course before rendering
 */
function elms_course_status_access($node) {
  return ($node->type == ELMS_ROOT_TYPE) ? user_access('view elms_course requirements dashboard') : FALSE;
}