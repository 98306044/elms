<?php
define('ELMS_GROUP_TYPE', 'version');
include_once('elms_course_versions.features.inc');

/**
 * Implementation of hook_form_alter().
 */
function elms_course_versions_form_alter(&$form, &$form_state, $form_id) {
  //alter the version form
  if ($form_id == 'version_node_form') {
    //always hide purl, they shouldn't need to know anything about it, it just happens
    $form['purl']['value']['#type'] = 'hidden';
    //because purl wants a url, generate a temporary, random one
    //this has to be done because the nid hasn't been set yet and we can't submit the node until we have a PURL identifier yet the NID is supposed to be part of the address, once submitted the node will automatically change thing
    if (arg(1) == 'add') {
      //set a random value initially
			$form['purl']['value']['#default_value'] = '_tmp_'. rand(1, 1000);
      //fill the default theme value if it exists
			if (variable_get('elms_helper_default_theme', 'chamfer') != variable_get('theme_default', '')) {
      $form['themes']['theme']['#default_value'] = variable_get('elms_helper_default_theme', 'chamfer');
			}
			
      //auto populate the descriptive field if it isn't set
      if ($form['og_description']['#value'] == '') {
        $nid = arg(3);
        if (isset($nid)) {
          $node = node_load(arg(3));
          $form['og_description']['#value'] = $node->field_course_title[0]['value'];
        }
      }
    }
    $form['#content_extra_fields']['spaces_preset']['weight'] = 8;
    //unset values that have been deselected
		$theme_ary = variable_get('elms_helper_disallowed_themes', array('cube'));
		$form_themes = $form['themes'];
		//remove non-theme defaults
		unset($form_themes['#type']);
		unset($form_themes['#title']);
		unset($form_themes['#description']);
		unset($form_themes['#collapsible']);
		unset($form_themes['#theme']);
		unset($form_themes['#weight']);
		unset($form_themes['theme']);
		foreach($form_themes as $key => $theme) {
			if (in_array($theme['description']['#title'], $theme_ary)) {
				unset($form['themes'][$key]);
        unset($form['themes']['theme']['#options'][$key]);
			}
		}
	}
}

/**
 * Implementation of hook_nodeapi().
 */
function elms_course_versions_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  case 'insert':
    //check for groups created
    if (og_is_group_type($node->type)) {
    //set the theme variable defaults before we are strongarmed into this group
    $theme_ary = variable_get('theme_settings', array());
    $space = spaces_load('og', $node->nid, TRUE);
    if ($space) {
      //load the course node for the name space info
      if (!empty($node->field_course_ref[0]['nid'])) {
        $course = node_load($node->field_course_ref[0]['nid']);
        $course_name = $course->title;
        $course_title = $course->field_course_title[0]['value'];
      }
      else {
        //if this is a sandbox then there won't be a value here so use the node's
        $course_name = $node->title;
        $course_title = $node->og_description;
      }
      //site the site name
      $space->controllers->variable->set('site_name', $course_name);
      //set slogan to the description of the course
      $space->controllers->variable->set('site_slogan', $course_title);
			//site footer if its been set
			if (!empty($course->field_footer[0]['value'])) {
        $space->controllers->variable->set('site_footer', $course->field_footer[0]['value']);
			}
      //establish default theme settings
      $space->controllers->variable->set('theme_settings', $theme_ary);
      //establish default theme settings for the selected theme
      $space->controllers->variable->set('theme_'. $node->og_theme .'_settings', $theme_ary);
      //turn on our default area as content
      //$space->controllers->variable->set('spaces_features', array('elms_course_content' => 1));
      //set some defaults for the version as they might not be set in the node form
      if (isset($node->default_version)) {
        $space->controllers->variable->set('spaces_preset_og', 'og_private');
        $node->og_private = 1;
      }
      //set webaccess state for strict per course settings
      if (module_exists('webaccess')) {
        $space->controllers->variable->set('webaccess_secure_site', $node->og_private);
      }
      //build course root since all courses come with content by default
      //check for the default argument coming from the course creation form making a version
      if (!isset($node->default_version) && !isset($node->spaces_og_clone)) {
        _elms_course_content_create_root($node, $node->field_instructional_template[0]['value']);
      }
    /*
    TODO: Move this code into the schedule module so that it can build schedules from that feature
          //remove the current schedule and build a new one
          if (module_exists('elms_schedule') && ($node->field_schedule_to_build[0]['value'] != '')) {
            if ($node->field_schedule_to_build[0]['value'] == 'rebuild') {
              $batch_call = '_elms_schedule_rebuild_schedule';
              $batch_title = 'Mapping Schedule';
            }
          else {
            //select all course events attached to this group
            $result = db_query("SELECT {node}.nid FROM {og_ancestry} JOIN {node} ON {node}.nid = {og_ancestry}.nid WHERE group_nid=%d AND {node}.type='course_event'", $node->nid);
            while ($val = db_fetch_array($result)) {
              node_delete($val['nid']);
            }
            $batch_call = '_elms_schedule_build_schedule';
            $batch_title = 'Building Schedule';
          }
          $batch = array(
            'title' => t($batch_title),
            'progress_message' => t('Completed job @current of @total.'),
            'operations' => array(
              array($batch_call, array($node)),
              array('_elms_version_node_access_rebuild_batch_operation', array($node)),
            ),
            'init_message' => t('Loading schedule'),
            'error_message' => t('An error has occured'),
            'finished' => '_elms_version_duplicate_branch_finished',
          );
          batch_set($batch);
          batch_process('node/' . $node->nid . '/edit/4');
      */
      }
    }
  break;
  case 'update':
    if (og_is_group_type($node->type)) {
      //load the space on group update
      $space = spaces_load('og', $node->nid, TRUE);
      if ($space) {
        //load the course node for the name space info
        if (!empty($node->field_course_ref[0]['nid'])) {
          $course = node_load($node->field_course_ref[0]['nid']);
          $course_name = $course->title;
          $course_title = $course->field_course_title[0]['value'];
        }
        else {
          //if this is a sandbox then there won't be a value here so use the node's
          $course_name = $node->title;
          $course_title = $node->og_description;
        }
        //site the site name
        $space->controllers->variable->set('site_name', $course_name);
        //set slogan to the description of the course
        $space->controllers->variable->set('site_slogan', $course_title);
      }
    }
  break;
  case 'delete':
    //clean up all space overrides just to be safe
    if (og_is_group_type($node->type)) {
      db_query("DELETE FROM {spaces_overrides} WHERE id=%d", $node->nid);
    }
    break;
  }
}

/**
 * Implementation of hook_dashboard_requirements().
 */
function elms_course_versions_dashboard_requirements($provider) {
  switch ($provider) {
	case 'og':
	  $group = og_get_group_context();
	  //add in the course status from current workflow state
	  $workflow_name = workflow_get_state_name($group->_workflow);
      $requirements['workflow_name'] = array(
        'title' => t('Course Status'),
        'value' => $workflow_name .' ('. l(t('Change workflow state'), 'node/'. $group->nid .'/workflow') .')',
        'severity' => REQUIREMENT_OK,
      );
	  if ($group->field_section_semester[0]['value'] != '') {
        $offering_details .= $group->field_section_semester[0]['value'];
	  }
	  if ($group->field_section_year[0]['value'] != '') {
		$offering_details .= $group->field_section_year[0]['value'];
	  }
	  if ($group->field_campus[0]['value'] != '') {
		$offering_details .= $group->field_campus[0]['value'];
	  }
	  if ($group->field_section_number[0]['value'] != '') {
	    $offering_details .= $group->field_section_number[0]['value']; 
	  }
	  if ($offering_details == '') {
	    $sev = REQUIREMENT_ERROR;
	  }
	  else {
		$sev = REQUIREMENT_INFO;
	  }
	  $requirements['offering_details'] = array(
        'title' => t('Offering Details'),
        'value' => $offering_details . '('. l(t('Change Offering Details'), 'node/'. $group->nid .'/edit') .')',
        'severity' => $sev,
      );
	break;
	case 'system':
      //add system level information
      $version_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='%s'", ELMS_GROUP_TYPE));
      $requirements['total_versions'] = array(
        'title' => t('Total Course Versions'),
        'value' => $version_count,
        'severity' => REQUIREMENT_INFO,
      );
    break;
  }
  return $requirements;
}
