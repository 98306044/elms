<?php
/**
 * @file
 * UX improvements for the ELMS experience that we want
 */
define('ELMS_VERSION', '6.x-1.0-alpha6');

/**
 * Implementation of hook_perm().
 */
function elms_helper_perm() {
  return array('administer elms configuration');
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function elms_helper_theme_registry_alter(&$vars) {
  //hijack the node tpl away from organic groups
  array_splice($vars['node']['theme paths'], 2, 0, drupal_get_path('module', 'elms_helper'));
}

/**
 * Implementation of hook_init().
 */
function elms_helper_init() {
  global $user;
  if (arg(2) == 'html_export' || arg(2) == 'check_links') {
    drupal_set_message(t('This is still in active development / future planned functionality.'), 'warning');
  }
  drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/elms_helper.css', 'theme');
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/redmond/redmond.css', 'module');
  //account for possible og theme swap when using the outline designer
  if (arg(0) == 'outline_designer') {
    $book_node = node_load(arg(2));
    if (isset($book_node->og_groups)) {
      foreach ($book_node->og_groups as $groupnid) {
        $group_node = node_load($groupnid);
      }
      if (og_is_group_type($group_node->type)) {
        og_set_theme($group_node);
        $theme_settings = variable_get('theme_'. $group_node->og_theme .'_settings', array());
        //add in custom font setting, a none file exists too
        drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
        //add in custom css if this course has any
        if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
          drupal_add_css($theme_settings['extra_css_path'], 'theme');
        }
        og_set_group_context($group_node);
        og_set_language($group_node);
      }
    }
  }
  //fixes glitch in other og projects where it forgets to set theme
  if (arg(0) == 'node') {
    $node = node_load(arg(1));
    if (og_is_group_type($node->type)) {
      og_set_theme($node);
      $theme_settings = variable_get('theme_'. $node->og_theme .'_settings', array());
      //add in custom font setting, a none file exists too
      drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
      //add in custom css if this course has any
      if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
        drupal_add_css($theme_settings['extra_css_path'], 'theme');
      }
      og_set_group_context($node);
      og_set_language($node);
    }
    else {
      $group = og_get_group_context();
      //unset breadcrumbs while in a group as elms takes care of pathing
      drupal_set_breadcrumb(array());
      if (isset($group->type)) {
        $theme_settings = variable_get('theme_'. $group->og_theme .'_settings', array());
        //add in custom font setting, a none file exists too
        if (isset($theme_settings['font'])) {
          drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
        }
        //add in custom css if this course has any
        if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
          drupal_add_css($theme_settings['extra_css_path'], 'theme');
        }
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function elms_helper_menu() {
  $items = array();
  $items['admin/elms'] = array(
    'title' => 'ELMS',
		'description' => 'Adjust ELMS system configuration options.',
    'weight' => -20,
	  'access arguments' => array('administer elms configuration'),
	  'page callback' => 'elms_helper_settings_overview',
    'file' => 'elms_helper.admin.inc',
	);
  $items['admin/elms/defaults'] = array(
    'title' => 'System Defaults',
		'description' => 'Set defaults for themes used and other global logic',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_helper_settings'),
    'access arguments' => array('administer elms configuration'),
  );
  return $items;
}

/**
 * Settings form for book feature.
 */

function elms_helper_settings() {
  $form = array();
  //render a select list based on a list of all available resources
  //$options = list_themes();
  $result = db_query("SELECT name, info FROM {system} WHERE type = 'theme' AND status=1");
  while ($theme = db_fetch_array($result)) {
    $info = unserialize($theme['info']);
    $options[$theme['name']] = $info['name'];
  }
  $form['elms_helper_default_theme'] = array(
    '#default_value' => variable_get('elms_helper_default_theme', 'chamfer'),
    '#description' => t('The default theme for newly created sites'),
    '#type' => 'select',
    '#multiple' => FALSE,
    '#title' => t('Default Theme'),
    '#options' => $options,
  );
  $form['elms_helper_disallowed_themes'] = array(
    '#default_value' => variable_get('elms_helper_disallowed_themes', array('cube')),
    '#description' => t("These are themes that should not be allowed to be used in sites. Typical usage for this would be hiding the default system or admin themes so that versions don't look the same as the system creating them."),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Disallowed Themes'),
    '#options' => $options,
  );
  return system_settings_form($form);
}


/**
 * Implementation of hook_menu_alter().
 */
function elms_helper_menu_alter(&$items) {
  //remove some confusing pages from menu items
  $items['node/%node/outline']['type'] = MENU_CALLBACK;
  $items['node/%/outline_designer']['type'] = MENU_CALLBACK;
  $items['og/activity']['type'] = MENU_CALLBACK;
  
  //add additional protection to user search functionality
  //we don't want ANYONE to be able to search for users
  //except for admins
  if (isset($items['search/user/%menu_tail'])) {
    $menu_item =& $items['search/user/%menu_tail'];
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
  if (isset($items['user/autocomplete'])) {
    $menu_item =& $items['user/autocomplete'];
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
  //alter things for the group form standard we want
  $items['node/%node/features']['title'] = t('ID Toolkit');
}

/**
 * Implementation of hook_form_alter().
 */
function elms_helper_form_alter(&$form, &$form_state, $form_id) {
  //hijack the spaces theme form and make it have ELMS specific stuff
  if ($form_id == '_spaces_theme_theme_form') {
  $group = og_get_group_context();
    //get local overrides from the new theme if possible
    $settings = variable_get('theme_'. $group->og_theme .'_settings', array());
    //verify something was returned, otherwise pull from the global defaults
    if (count($settings) == 0) {
      $settings = variable_get('theme_settings', array());
    }
    //unset values that have been deselected
    $theme_ary = variable_get('elms_helper_disallowed_themes', array('cube'));
    $form_themes = $form['themes'];
    //remove non-theme defaults
    unset($form_themes['#type']);
    unset($form_themes['#title']);
    unset($form_themes['#description']);
    unset($form_themes['#collapsible']);
    unset($form_themes['#theme']);
    unset($form_themes['#weight']);
    unset($form_themes['theme']);
    foreach($form_themes as $key => $theme) {
      if (in_array($theme['description']['#title'], $theme_ary)) {
        unset($form['themes'][$key]);
        unset($form['themes']['theme']['#options'][$key]);
      }
    }
    //add in css options and chamfer specific code
    //font selection
    $options = array(
      'none' => '- Use CSS Default -',
      'georgia' => 'Georgia, serif',
      'palatino' => '"Palatino Linotype", "Book Antiqua", Palatino, serif',
      'times' => '"Times New Roman", Times, serif',
      'arial' => 'Arial, Helvetica, sans-serif',
      'arialblack' => 'Arial Black, Gadget, sans-serif',
      'comic' => '"Comic Sans MS", cursive, sans-serif',
      'impact' => 'Impact, Charcoal, sans-serif',
      'lucidasans' => '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      'tahoma' => 'Tahoma, Geneva, sans-serif',
      'trebuchet' => '"Trebuchet MS", Helvetica, sans-serif',
      'verdana' => 'Verdana, Geneva, sans-serif',
      'courier' => '"Courier New", Courier, monospace',
      'lucidaconsole' => '"Lucida Console", Monaco, monospace',
    );
    $form['font_contatiner'] = array(
      '#type' => 'fieldset',
      '#title' => t('Font / Style'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['font_contatiner']['font'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t("Font"),
      '#description' => 'Select a font for all content in this site.  Leaving default will use whatever your theme has indicated.',
      '#required' => TRUE,
      '#default_value' => $settings['font'],
    );
    $form['font_contatiner']['extra_css_use'] = array(
      '#type' => 'select',
      '#title' => t('Use..'),
      '#options' => array(0 => 'Theme CSS Only', 1 => 'Upload / File Path'),
      '#default_value' => $settings['extra_css_use'],
    );
    $form['font_contatiner']['extra_css_path'] = array(
      '#type' => 'textfield',
      '#size' => '40',
      '#title' => t("File Path"),
      '#required' => FALSE,
      '#default_value' => $settings['extra_css_path'],
    );
    $form['font_contatiner']['extra_css_upload'] = array(
      '#type' => 'file',
      '#size' => '10',
      '#title' => t("Upload CSS File"),
      '#description' => 'Upload your own CSS file for use in this site',
      '#required' => FALSE,
    );
    if ($form['themes']['theme']['#default_value'] == 'chamfer') {
      drupal_add_js(drupal_get_path('theme', 'chamfer') .'/js/settings.js', 'theme');
      if (module_exists('jquery_colorpicker')) {
        drupal_add_js(drupal_get_path('theme', 'chamfer') .'/js/jquery_colorpicker.js', 'theme');
      }
      /*
       * The default values for the theme variables. Make sure $defaults exactly
       * matches the $defaults in the template.php file.
       */
      $color_array = array(
        'default' => 'Default',
        'mudbrown' => 'Mud Brown',
        'silver' => 'Silver',
        'formalgreen' => 'Formal Green',
        'black' => 'Space Opera Black',
        'custom' => 'Custom',
      );
      $defaults = array(
        'chamfer_borders' => 1,
        'chamfer_bgimage' => 0,
        'chamfer_top_logo' => 1, //0,1 or 2 for off, clear or solid
        'chamfer_top_link' => '',
        'chamfer_bottom_logo' => 1, //0,1 or 2 for off, clear or solid
        'chamfer_bottom_link' => '',
        'chamfer_color_template' => 'default',
        'chamfer_color_primary' => '000000',
        'chamfer_color_secondary' => '000000',
        'chamfer_color_header1' => '0099FF',
        'chamfer_color_header2' => '00CCFF',
        'chamfer_color_text' => '666666',
        'chamfer_color_link' => '0099FF',
        'chamfer_color_blocks' => 'E7E7E7',
        'chamfer_color_blockstyle_link' => '6D6D6D',
        'chamfer_color_blockstyle_bgcolor' => 'df5c5c',
        'chamfer_color_blockstyle_linkhover' => 'FFFFFF',
        'chamfer_color_footer_text' => 'FFFFFF',
        'chamfer_color_footer_link' => '00CCFF',
      );
      $form['logo'] = array(
        '#type' => 'fieldset',
        '#title' => t('Site Banner'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['logo']['default_logo'] = array(
        '#type' => 'select',
        '#title' => t('Use..'),
        '#options' => array(1 => 'Default Banner', 0 => 'Upload / Path Below'),
        '#default_value' => $settings['default_logo'],
      );
      $form['logo']['logo_path'] = array(
        '#type' => 'textfield',
        '#size' => '40',
        '#title' => t("File Path"),
        '#required' => FALSE,
        '#default_value' => $settings['logo_path'],
      );
      $form['logo']['logo_upload'] = array(
        '#type' => 'file',
        '#size' => '10',
        '#title' => t("Upload"),
        '#description' => 'In Chamfer this will take the place of the site-banner (correct dimensions are 950px by 108px). File size must be less then 2M',
        '#required' => FALSE,
      );
      // Create the form widgets using Forms API
      $form['chamfer_color_template'] = array(
        '#type' => 'select',
        '#title' => t('Chamfer Template'),
        '#description' => t('Use this color template'),
        '#options' => $color_array,
        '#default_value' => $settings['chamfer_color_template'],
      );
      if (module_exists('jquery_colorpicker')) {
        $fieldtype = 'colorpicker';
      }
      else {
        $fieldtype = 'textfield';
      }
      //page colors
      $form['page'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer Page Settings'),
        '#description' => t("Change page related colors"),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['page']['chamfer_bgimage'] = array(
        '#type' => 'checkbox',
        '#title' => t('Background Image'),
        '#description' => t('Whether or not to show the background image'),
        '#default_value' => $settings['chamfer_bgimage'],
      );
      $form['page']['chamfer_borders'] = array(
        '#type' => 'checkbox',
        '#title' => t('Include Borders'),
        '#description' => t('Whether or not there should be a 10px border'),
        '#default_value' => $settings['chamfer_borders'],
      );
      $form['page']['chamfer_color_primary'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Background'),
        '#description' => t('Color of the background'),
        '#default_value' => $settings['chamfer_color_primary'],
      );
      $form['page']['chamfer_color_secondary'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Secondary Background'),
        '#description' => t('Color of the Inner background, the border and header / footer'),
        '#default_value' => $settings['chamfer_color_secondary'],
      );
      //header
      $form['header'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer Header Settings'),
        '#description' => t('Change items in the header'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['header']['chamfer_top_logo'] = array(
        '#type' => 'select',
        '#title' => t('Show Top Logo'),
        '#description' => t('Display the logo at the top left of the interface'),
        '#options' => array(0 => 'No', 1 => 'Logo 1', 2 => 'Logo 2'),
        '#default_value' => $settings['chamfer_top_logo'],
      );
      $form['header']['chamfer_top_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Top Logo Link'),
        '#description' => t('The link the logo should go to when clicked, leave blank for none'),
        '#default_value' => $settings['chamfer_top_link'],
      );
      $form['header']['chamfer_color_header1'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Site Title'),
        '#description' => t('Color of the site title'),
        '#default_value' => $settings['chamfer_color_header1'],
      );
      $form['header']['chamfer_color_header2'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Site Slogan'),
        '#description' => t('Color of the site slogan'),
        '#default_value' => $settings['chamfer_color_header2'],
      );
      //content
      $form['content'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer Content Settings'),
        '#description' => t("Change content related colors"),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['content']['chamfer_color_text'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Text'),
        '#description' => t('Body of content text'),
        '#default_value' => $settings['chamfer_color_text'],
      );
      $form['content']['chamfer_color_link'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Links'),
        '#description' => t('Color of content links'),
        '#default_value' => $settings['chamfer_color_link'],
      );
      $form['content']['chamfer_color_blocks'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Block background'),
        '#description' => t('Background color of the block regions in the content'),
        '#default_value' => $settings['chamfer_color_blocks'],
      );
      //footer
      $form['footer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer Footer Settings'),
        '#description' => t('Change items in the footer'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['footer']['chamfer_bottom_logo'] = array(
        '#type' => 'select',
        '#title' => t('Show Bottom Logo'),
        '#description' => t('Display the logo at the top left of the interface'),
        '#options' => array(0 => 'No', 1 => 'Logo 1', 2 => 'Logo 2'),
        '#default_value' => $settings['chamfer_bottom_logo'],
      );
      $form['footer']['chamfer_bottom_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Bottom Logo Link'),
        '#description' => t('The link the logo should go to when clicked, leave blank for none'),
        '#default_value' => $settings['chamfer_bottom_link'],
      );
      $form['footer']['chamfer_color_footer_text'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Footer text'),
        '#description' => t('Color of the footer text'),
        '#default_value' => $settings['chamfer_color_footer_text'],
      );
      $form['footer']['chamfer_color_footer_links'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Footer links'),
        '#description' => t('Color of the footer links'),
        '#default_value' => $settings['chamfer_color_footer_links'],
      );
    }
  }
  if ($form_id == 'user_profile_form') {
    //remove change theme from view even if they have the permission, gives us granularity so they can set it in the group / site creation
    $form['theme_select']['#access'] = FALSE;
    //contact form has been removed because the form should only be used for instructor to student and student to instructor, this walls students from contacting each other via the system. also reduces confusion as this isn't something they should want to turn off (need to communicate with instructor and visa versa)
    $form['contact']['#access'] = FALSE;
  }
  //form modifications for js to work
  if (strpos($form_id, 'editview_node_form_') === 0) {
    $form['title']['#attributes']['class'] = 'editview_title';
    $form['field_due_date']['#attributes']['class'] = 'editview_date';
    $form['field_content_ref']['#attributes']['class'] = 'editview_nid';
    $form['field_task_link']['#attributes']['class'] = 'editview_task_link';
  }
  //advanced help to better organize these alters
  _elms_helper_adv_help(&$form, &$form_state, $form_id);
}

/**
 * Implementation of hook_link_alter().
 */
function elms_helper_link_alter(&$links, $node, $comment = NULL) {
  //remove add book as it's confusing with outline designer in place
  if (isset($links['book_add_child'])) {
    unset($links['book_add_child']);
  }
  //get a list of anything associated to this and remove it
  //we do this because the left side region pulls all links over there
  $tmp_ref_links = nodereference_url_build_all_links($node, 0);
  foreach ($tmp_ref_links as $key => $link) {
      unset($links[$key]);
  }
  //unset all flags
  $flag_links = flag_link('node', $node);
  //if this has flags then render them here
  if (count($flag_links)) {
    foreach ($flag_links as $key => $flag) {
      unset($links[$key]);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function elms_helper_content_extra_fields($type_name) {
  $fields['spaces_preset'] = array(
    'label' => t('Spaces Presets'),
    'description' => t('Spaces type'),
    'weight' => 100,
  );
  $fields['purl'] = array(
    'label' => t('Purl'),
    'description' => t('Persistent URL textfield'),
    'weight' => 0,
  );
  $fields['themes'] = array(
    'label' => t('Themes'),
    'description' => t('Theme setting from OG'),
    'weight' => 1,
  );
  return $fields;
}

/**
 * Implementation of hook_dashboard_requirements().
 */
function elms_helper_dashboard_requirements($provider) {
  switch ($provider) {
    case 'system':
    //count active accounts
      $user_accounts_count = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE status=1"));
      $requirements['user_accounts_count'] = array(
        'title' => t('Count of User Accounts'), 
        'value' => $user_accounts_count,
        'severity' => REQUIREMENT_INFO,
      );
    //count students / instructors / TAs
    $count_students = db_result(db_query("SELECT COUNT(u.uid) FROM {users} AS u JOIN {users_roles} AS ur ON u.uid=ur.uid JOIN {role} AS r ON ur.rid=r.rid WHERE r.name='student' AND status=1"));
    $requirements['active_student_accounts'] = array(
          'title' => t('Student Count'), 
          'value' => $count_students,
          'severity' => REQUIREMENT_INFO,
        );
    //list all admins
    $accounts_list = array(
      'administrator' => '',
    'instructional designer' => '',
    'staff' => '',
    'instructor' => '',
    'student staff' => '',
    'teaching assistant' => '',
    );
    $result = db_query("SELECT u.name AS uname, r.name AS rolename FROM {users} AS u JOIN {users_roles} AS ur ON u.uid=ur.uid JOIN {role} AS r ON ur.rid=r.rid WHERE r.name IN('administrator', 'instructional designer', 'staff', 'instructor', 'student staff', 'teaching assistant') AND status=1");
    while ($val = db_fetch_array($result)) {
        $accounts_list[$val['rolename']] .= $val['uname'] .' ';
    $counts[$val['rolename']]++;
    }
    //loop through and render all this info
    foreach ($accounts_list as $rolename => $unames) {
        $requirements['active_'. str_replace(' ', '', $rolename) .'_accounts'] = array(
          'title' => t('@account Accounts', array('@account' => ucwords($rolename))), 
          'value' => $counts[$rolename] .' ('. $unames .')',
          'severity' => REQUIREMENT_INFO,
        );
    }
  break;
  }
  return $requirements;
}

//organizing function for all advanced help topics
function _elms_helper_adv_help(&$form, &$form_state, $form_id) {
  //dpm($form_id);
  switch ($form_id) {
    case 'book_admin_edit':
    $form['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'outline_designer');
    break;
    case 'folder_node_form':
    $form['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'cm_folder');
    $form['body_field']['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'text_editor');
    break;
    case 'page_node_form':
    $form['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'cm_page');
    $form['body_field']['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'text_editor');
    break;
    case 'reference_page_node_form':
    $form['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'cm_ref');
    break;
    case 'link_node_form':
    $form['#prefix'] .= theme('advanced_help_topic', 'elms_helper', 'cm_link');
    break;
  }
}