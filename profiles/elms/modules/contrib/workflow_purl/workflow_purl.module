<?php
//Copyright (C) 2011  The Pennsylvania State University
//
//Bryan Ollendyke
//bto108@psu.edu
//
//Keith D. Bailey
//kdb163@psu.edu
//
//12 Borland
//University Park,  PA 16802

/**
 * @file
 * Integrates workflow and purl
 */

/*
 * Implementation of hook_form_alter().
 */
function workflow_purl_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'workflow_state_add_form') {
    $form['purl'] = array(
      '#type' => 'fieldset',
      '#title' => t('Purl Integration'),
      '#description' => t('Define the path that should be constructed for PURL based on workflow state change'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#weight' => 0,
    );
    $form['purl']['purl_integration'] = array(
      '#type' => 'textfield',
      '#title' => t('Path'),
      '#default_value' => variable_get('workflow_purl_'. $form['wid']['#value'], ''),
      '#description' => t('Leave this blank to ignore purl integration for this workflow state'),
    );
    $form['purl']['help'] = array(
      '#type' => 'markup',
      '#value' => theme('token_help', array('global','node','user')),
    );
	dpm($form);
  }
}
//$item['link_path'] = token_replace($menu_token_item['link_path'], 'node', $node);
/**
 * Implementation of hook_nodeapi().
 */
function workflow_purl_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  //the group node makes no sense to load to users, redirect to the front-page
  switch ($op) {
  case 'presave':
    //detect a workflow change about to happen
    if ($node->_workflow != $node->workflow) {
      $node->_purl_change = _workflow_purl_get_purl($node);
    }
    break;
  case 'update':
    if (isset($node->_purl_change)) {
      $modifier = array(
        'value' => $node->_purl_change,
        'provider' => 'spaces_og',
        'id' => $node->nid,
      );
      purl_save($modifier);
      //set destination manually since purl changed and the old path no longer exists. this is the joy and pain of PURL
      purl_goto('<front>', array('purl' => array('provider' => 'spaces_og', 'id' => $node->nid)));
    }
    break;
  case 'insert':
    //check for a workflow state existing on this node
    if (isset($node->_workflow)) {
      //verify that this workflow state has a purl map
      $purl_map = _workflow_purl_get_purl($node);
      //if purl_map is not false, set the modifier
      if ($purl_map != FALSE) {
        $modifier = array(
          'value' => $purl_map,
          'provider' => 'spaces_og',
          'id' => $node->nid,
        );
        purl_save($modifier);
      }
    }
  break;
  }
}

//helper function to make modification of purl easier
function _workflow_purl_get_purl($node) {
  $course = node_load($node->field_course_ref[0]['nid']);
  $output = $course->title;
  switch ($node->workflow) {
  case 1:
  case 2:
  case 3: //initial states
    $output .= '_dev_'. $node->nid;
  break;
  case 4: //inactive
    $output .= '_inactive_'. $node->nid;
  break;
  case 5: //offered
    $output .= '_offered_'. $node->nid;
  break;
  case 6: //archive
    $output .= '_archive_'. $node->nid;
  break;
  case 7: //Promo
    $output .= '_promo_'. $node->nid;
  break;
  case 8: //master
    $output .= '_master_'. $node->nid;
  break;
  default:
    $output .= '_dev_'. $node->nid;
  break;
  }
  $output = drupal_strtolower(str_replace(' ', '', $output));
  return $output;
}