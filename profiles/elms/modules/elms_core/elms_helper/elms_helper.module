<?php
// $Id: elms_helper.module

/**
 * @file
 * UX improvements for the ELMS experience that we want
 */
define('ELMS_VERSION', '6.x-1.0-alpha5');
/**
 * Implementation of (undocumented) hook_theme_registry_alter().
 */
function elms_helper_theme_registry_alter(&$vars) {
  //hijack the node tpl
  array_splice($vars['node']['theme paths'], 2, 0, drupal_get_path('module', 'elms_helper'));
  //make the username show up the way we want
  $vars['username']['theme path'] = drupal_get_path('module','elms_helper'); 
  $vars['username']['function'] = 'theme_username_elms';
  $vars['username']['theme paths'] = array(0 => drupal_get_path('module','elms_helper'));
  //make book navigation function with a jump menu
  $vars['book_navigation']['theme path'] = drupal_get_path('module','elms_helper'); 
  $vars['book_navigation']['path'] = drupal_get_path('module','elms_helper');
  $vars['book_navigation']['theme paths'] = array(0 => drupal_get_path('module','elms_helper'));
}
/**
 * Implementation of hook_init().
 */
function elms_helper_init() {
  global $user;
  if (arg(2) == 'html_export' || arg(2) == 'check_links') {
    drupal_set_message(t('This is still in active development / future planned functionality.'),'warning');
  }
  drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/elms_helper.css','theme');
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/redmond/redmond.css','module');
  drupal_add_js(drupal_get_path('module', 'elms_helper') .'/js/elms_helper.js');
  //account for the content feature so it redirects past the book root, we don't want anyone accidentally changing it
  if (arg(0) == 'content') {
    $group = og_get_group_context();
  $book = node_load($group->book_nid);
    $childobj = book_next($book->book);
  drupal_goto($childobj['link_path']);
  }
  //account for possible og theme swap when using the outline designer
  if (arg(0) == 'outline_designer') {
    $book_node = node_load(arg(2));
    if (isset($book_node->og_groups)) {
      foreach($book_node->og_groups as $groupnid) {
        $group_node = node_load($groupnid);
      }
      if(og_is_group_type($group_node->type)){
        og_set_theme($group_node);
    $theme_settings = variable_get('theme_'. $group_node->og_theme .'_settings',array());
    //add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
    //add in custom css if this course has any
    if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], 'theme');
    }
        og_set_group_context($group_node);
        og_set_language($group_node);
      }
    }
  }
  //fixes glitch in other og projects where it forgets to set theme
  if(arg(0) == 'node') {
    $node = node_load(arg(1));
    if(og_is_group_type($node->type)){
      og_set_theme($node);
    $theme_settings = variable_get('theme_'. $node->og_theme .'_settings',array());
    //add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
    //add in custom css if this course has any
    if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], 'theme');
    }
      og_set_group_context($node);
      og_set_language($node);
    //set breadcrumb so there's no confuion on group homepage
    $breadcrumb = array();
    $breadcrumb[] = l(t('Course Schedule'), 'node/'. $node->nid);
    drupal_set_breadcrumb($breadcrumb);
      //see if this is the group homepage
      if (arg(2) == '') {
        $result = db_query("SELECT {accesslog}.title,{accesslog}.path FROM {accesslog} JOIN {menu_links} ON {menu_links}.link_path = {accesslog}.path JOIN {book} ON {menu_links}.mlid = {book}.mlid JOIN {og_ancestry} ON {book}.nid={og_ancestry}.nid WHERE {accesslog}.uid=%d AND {og_ancestry}.group_nid=%d ORDER BY {accesslog}.timestamp DESC LIMIT 1", $user->uid, $node->nid);
        $val = db_fetch_array($result);
        if ($val['title'] != '') {
          drupal_set_message('Continue where you left off? '. l(t($val['title']),$val['path']),'elms-message');
        }
      }
    }
  else {
    $group = og_get_group_context();
    $theme_settings = variable_get('theme_'. $group->og_theme .'_settings',array());
    //add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
    //add in custom css if this course has any
    if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], 'theme');
    }
    
  }
  }
  elseif(arg(0) == 'courses') {
    //they're on the homepage of the site, ask if they want to go to the last course/page they accessed
    $result = db_query("SELECT {accesslog}.title,{accesslog}.path FROM {accesslog} JOIN {menu_links} ON {menu_links}.link_path = {accesslog}.path JOIN {book} ON {menu_links}.mlid = {book}.mlid JOIN {og_ancestry} ON {book}.nid={og_ancestry}.nid WHERE {accesslog}.uid=%d ORDER BY {accesslog}.timestamp DESC LIMIT 1", $user->uid);
    $val = db_fetch_array($result);
    if ($val['title'] != '') {
      drupal_set_message('Continue where you left off? '. l(t($val['title']),$val['path']),'elms-message');
    }
  }
  $group = og_get_group_context();
  //version form
  if ((arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'version') || ($group->type == 'version' && arg(2) == 'edit')) {
    drupal_add_js(drupal_get_path('module', 'elms_helper') .'/js/version_form.js');
  }
}

/**
 * Implementation of hook_menu_alter()
 */
function elms_helper_menu_alter(&$items) {
  //link outline access argument to tracker one, that way it's hidden from IDs
  $items['node/%node/outline']['access callback'] = '_elms_helper_outline_tab';
  //remove some confusing pages from menu items
  $items['node/%/outline_designer']['type'] = MENU_CALLBACK;
  $items['og/activity']['type'] = MENU_CALLBACK;
  
  //add additional protection to user search functionality
  //we don't want ANYONE to be able to search for users
  //except for admins
 if (isset($items['search/user/%menu_tail'])) {
    $menu_item =& $items['search/user/%menu_tail'];
 
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
 
  if (isset($items['user/autocomplete'])) {
    $menu_item =& $items['user/autocomplete'];
 
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
}

/**
 * Access helper function to remove the outline tab from the group page
 */
function _elms_helper_outline_tab() {
  $group_node = node_load(arg(1));
  if(og_is_group_type($group_node->type)){
    return false;
  }
  return user_access('administer book outlines');
}

/**
 * Implementation of hook_block().
 */
function elms_helper_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('ELMS Left Nav'), 
      'weight' => -10, 
      'status' => 0, 
    );
    $blocks[1] = array(
      'info' => t('ELMS Header Nav'), 
      'weight' => 0, 
      'status' => 0, 
    );
    $blocks[2] = array(
      'info' => t('ELMS Contextual Left Nav'), 
      'weight' => -9, 
      'status' => 0,
    );
    $blocks[3] = array(
      'info' => t('ELMS Contextual Right Nav'), 
      'weight' => 0, 
      'status' => 0,
    );
  $blocks[4] = array(
      'info' => t('ELMS Logged in'), 
      'weight' => 0, 
      'status' => 0,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = _elms_helper_nav('left');
      break;
      case 1:
        $block = _elms_helper_nav('top');
      break;
      case 2:
        $block = _elms_helper_nav('leftsub');
      break;
      case 3:
        $block = _elms_helper_nav('right');
      break;
    case 4:
      global $user;
    $group = og_get_group_context();
      if ($user->uid != 0) {
        $block['title'] = t('logged in');
    }
    else {
      $block['title'] = t('log in');
    }
    $block['content'] = _elms_helper_loggedin_links($user->uid, $group);
    break;
    }
    return $block;
  }
}


//helper function for logged in items
function _elms_helper_loggedin_links($uid, $group) {
  //anonymous user and psu webaccess installed
  if($uid == 0 && module_exists('webaccess')) {
   $output.= theme('menu_item',l(t('Login'),'login', array('query' => array('destination' => '/courses/my'), 'icon'=> 'default', 'purl' => array('disabled' => TRUE))), 0);
  }
  //annonymous and non psu webaccess site
  elseif($uid == 0) {
    $output.= theme('menu_item',l(t('Login'),'user', array('query' => array('destination' => '/courses/my'), 'purl' => array('disabled' => TRUE))), 0);
  }
  return $output;
}
/**
 * Implementation of hook_form_alter()
 */
function elms_helper_form_alter(&$form, &$form_state, $form_id) {
  //if the course form is in edit mode, remove the course outline field, this could cause confusion for users if they tried to change it
  if ($form_id == 'version_node_form' && arg(1) != 'add') {
    $form['purl']['value']['#description'] = "<font color='#CC0000'>Warning: Changing this will alter the current path of your course content / links.  This is only an issue if you have directly linked to pages in your course.</font><br/>". $form['purl']['value']['#description'];
  }
  if ($form_id == 'version_node_form') {
  //stupid glitch hiding these items
  unset($form['buttons']);
  unset($form['themes']['#collapsible']);
  //render theme without collapse box wrapper
  $form['themes']['#type'] = 'markup';
  $form['#content_extra_fields']['spaces_preset']['weight'] = 8;
    $form['title']['#description'] = t('Name and number of the course');
    //unset rubik which is used for administering the site
    unset($form['themes']['rubik']);
    unset($form['themes']['theme']['#options']['rubik']);
    //unset sky / default theme
    unset($form['themes']['']);
    unset($form['themes']['theme']['#options']['']);
  }
  if ($form_id == 'user_profile_form') {
    //remove change theme from view even if they have the permission, gives us granularity so they can set it in the group / course creation
    $form['theme_select']['#access'] = FALSE;
    //contact form has been removed because the form should only be used for instructor to student and student to instructor, this walls students from contacting each other via the system. also reduces confusion as this isn't something they should want to turn off (need to communicate with instructor and visa versa)
    $form['contact']['#access'] = FALSE;
  }
  //form modifications for js to work
  if (strpos($form_id,'editview_node_form_') === 0) {
   $form['title']['#attributes']['class'] = 'editview_title';
   $form['field_due_date']['#attributes']['class'] = 'editview_date';
   $form['field_content_ref']['#attributes']['class'] = 'editview_nid';
   $form['field_task_link']['#attributes']['class'] = 'editview_task_link';
  }
}

/**
 * Implementation of hook_link()
 */
function elms_helper_link($type, $object, $teaser = FALSE) {
  $links = array();
  $print_option = variable_get('elms_print_options','both');
  if ($type == 'node' && isset($object->book['plid']) && !$teaser && user_access('see printer-friendly version')) {
	$group = og_get_group_context();
	$parent = book_link_load($object->book['plid']);
	//verify print setting
	if ($print_option == 'print_lesson' || $print_option == 'print_course' && $group->book_nid != $parent['nid']) {
      $links['book_print_lesson'] = array(
      'href' => 'print/book/export/html/'. $parent['nid'],
      'title' => '<img src="/sites/all/modules/print/icons/print_icon.gif" alt="Print Lesson" title="Print Lesson" width="16" height="16" class="print-icon" />',
      'attributes' => array(
        'title' => 'Display a printer-friendly version of this page.',
        'class' => 'print-page-lesson',
        'onclick' => 'window.open(this.href); return false',
        'rel' => 'nofollow',
      ),
      'html' => 1,
      );
	}
	//verify print setting
	if ($print_option == 'print_course') {
	  $links['book_print_course'] = array(
      'href' => 'book/export/html/'. $group->book_nid,
      'title' => '<img src="/sites/all/modules/print/icons/print_icon.gif" alt="Print Course" title="Print Course" width="16" height="16" class="print-icon" />',
      'attributes' => array(
        'title' => 'Display a printer-friendly version of this page.',
        'class' => 'print-page-lesson',
        'onclick' => 'window.open(this.href); return false',
        'rel' => 'nofollow',
      ),
      'html' => 1,
      );
	}
  }
  return $links;
}

/**
 * Implementation of hook_link_alter()
 */
function elms_helper_link_alter(&$links, $node, $comment = NULL) {
  //check print setting
  $print_option = variable_get('elms_print_options','both');
  if ($print_option == 'none') {
    unset($links['book_printer']);
  }
  //remove add book as it's confusing with outline designer in place
  unset($links['book_add_child']);
  //shifts bookmarks if activated
  $temp = $links['flag-bookmarks'];
  unset($links['flag-bookmarks']);
  array_unshift($links,$temp);
}

/**
 * Implementation of hook_nodeapi().
 */
function elms_helper_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
  //if the user is viewing a page with no content and has children goto first child
      if ($node->type == 'folder' && $node->book['has_children'] == 1 && !strpos($_SERVER['SCRIPT_NAME'],'cron.php')) {
        $childobj = book_next($node->book);
    //if this user can't edit the node then skip it as we've already proven that it's blank
        if (!node_access('update',$node)) {
          drupal_goto($childobj['link_path']);
        }
        else {
          drupal_set_message('This page will redirect to '. l(t($childobj['title']), $childobj['link_path']) .' for students.','elms-message');
        }
      }
  case 'prepare':
    if(isset($node->og_groups_both)) {
    //clean up the typically horrible drupal breadcrumbs based on group context and book path
    $breadcrumb = array();
    //calculate the group home
    foreach($node->og_groups_both as $key => $gname) {
      $breadcrumb[] = l(t('Course Home'), 'node/'. $key);
    }
    //get the book path in menu_link form
    $book_path = book_build_active_trail($node->book);
    //first links are always frontpage and book-root
    array_shift($book_path);
    array_shift($book_path);
    //iterate each menu itema nd convert to valid breadcrumb
    foreach($book_path as $bookpage) {
    $breadcrumb[] = l(t($bookpage['title']),$bookpage['link_path']);
    }
    drupal_set_breadcrumb($breadcrumb);
    }
    elseif(og_is_group_type($node->type)) {
    $breadcrumb = array();
      $breadcrumb[] = l(t('Course Home'), 'node/'. $node->nid);
        drupal_set_breadcrumb($breadcrumb);
    }
    break;
  }
}

//helper function to contextually calculate the book used by the current group based on the naming conventions that we put in place
function _elms_helper_nav($position = 'left') {
  //get group nid
  $group_node = og_get_group_context();
  if (isset($group_node->nid)) {
    //figure out the course outline that's in this book
    $title = '';
    $location = $group_node->field_navigation[0]['value'];
    $config2 = array();
    $render = FALSE;
    $config1 = array(
    'delta' => -1,
    'menu_name' => 'book-toc-'. $group_node->book_nid,
    'parent_mlid' => $group_node->book_outline_mlid,
    'admin_title' => 'ELMS Outline Top',
    'sort' => 0
    );
  //a whole lot of conditionals as to if a block should render menu hierarchies or not based on if the setting has been set in the group/course node
  switch ($position) {
    case 'top':
      switch ($location) {
      case 'dropdown':
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 1,
        );
        $render = TRUE;
        $displaytitle = FALSE;
      break;
      case 'dropdownactiveleft':
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 1,
        );
        $render = TRUE;
        $displaytitle = FALSE;
      break;
      case 'dropdownleft':
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 1,
        );
        $render = TRUE;
        $displaytitle = FALSE;
      break;
      }
    break;
    case 'left':
      switch ($location) {
      case 'dropdownactiveleft':
        $config2 = array(
        'title_link' => 1,
        'level' => 2,
        'follow' => 'active',
        'depth' => 1,
        'expanded' => 0,
        );
        $render = TRUE;
        $displaytitle = TRUE;
      break;
      case 'dropdownleft':
        $blockary['title'] = '<none>';
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 0,
        );
        $render = TRUE;
        $displaytitle = FALSE;
      break;
      case 'left':
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 0,
        );
        $render = TRUE;
        $displaytitle = FALSE;
		$title = 'Content';
      break;
      case 'activeleftleft':
        $config2 = array(
        'title_link' => 1,
        'level' => 2,
        'follow' => 'active',
        'depth' => 1,
        'expanded' => 0,
        );
        $render = TRUE;
        $displaytitle = TRUE;
      break;
    case 'leftactiveright':
        $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 2,
        'expanded' => 0,
        );
        $render = TRUE;
        $displaytitle = FALSE;
      break;
      }
    break;
  case 'leftsub':
    switch ($location) {
    case 'activeleftleft':
      $config2 = array(
        'title_link' => 0,
        'level' => 1,
        'follow' => 0,
        'depth' => 1,
        'expanded' => 0,
      );
      $render = TRUE;
      $displaytitle = FALSE;
      $title = 'Course Content';
    break;  
    }
  break;
  case 'right':
    switch ($location) {
  case 'leftactiveright':
    $config2 = array(
        'title_link' => 1,
        'level' => 3,
        'follow' => 0,
        'depth' => 0,
        'expanded' => 0,
        );
      $render = TRUE;
      $displaytitle = TRUE;
  break;
  }
  }
  $config = array_merge($config1, $config2);
  $blockary = menu_tree_build($config);
  if (!$displaytitle) {
    if($title == '') {
      $blockary['title'] = '<none>';
    }
    else {
	  $blockary['subject'] = $title;
      $blockary['title'] = $title;
    }
  }
  if ($render) {
    return $blockary;
  }
  }
  //display nothing for the block as it's failed our tests for rendering
  return array();
}

//implementation of theme hook hijack -- takes all user names and if they have a role, adds it on (that way instructors show up as name (instructor)
function theme_username_elms($object) {
  if ($object->uid && $object->name) {
  $result = db_query("SELECT name FROM {role} JOIN {users_roles} ON {users_roles}.rid = {role}.rid WHERE uid=%d",$object->uid);
    $role = db_fetch_array($result);
  if ($role['name'] != '') {
    $role['name'] = ' ('. $role['name'] .')';
  }
    // Shorten the name when it is too long or it will break many tables.
    if (drupal_strlen($object->name) > 20) {
      $name = drupal_substr($object->name, 0, 15) . '...';
    }
    else {
      $name = $object->name . $role['name'];
    }

    if (user_access('access user profiles')) {
      $output = l($name, 'user/' . $object->uid, array('attributes' => array('title' => t('View user profile.'))));
    }
    else {
      $output = check_plain($name);
    }
  }
  else if ($object->name) {
    // Sometimes modules display content composed by people who are
    // not registered members of the site (e.g. mailing list or news
    // aggregator modules). This clause enables modules to display
    // the true author of the content.
    if (!empty($object->homepage)) {
      $output = l($object->name, $object->homepage, array('attributes' => array('rel' => 'nofollow')));
    }
    else {
      $output = check_plain($object->name);
    }

    $output .= ' (' . t('not verified') . ')';
  }
  else {
    $output = check_plain(variable_get('anonymous', t('Anonymous')));
  }

  return $output;
}


//helper function for how we render the pager navigation
function _elms_helper_toc($bid, $exclude = array(), $depth_limit) {
    $tree = menu_tree_all_data(book_menu_name($bid));
    $toc = array();
    _elms_helper_toc_recurse($tree, '', $toc, $exclude, $depth_limit);
    return $toc;
  }
//helper function for looping through a tree to build out the display  
function _elms_helper_toc_recurse($tree, $indent, &$toc, $exclude, $depth_limit) {
  foreach ($tree as $data) {
    if ($data['link']['depth'] > $depth_limit) {
      // Don't iterate through any links on this level.
      break;
    }
    if (!in_array($data['link']['mlid'], $exclude)) {
      $toc[$data['link']['href']] = $indent .' '. truncate_utf8($data['link']['title'], 30, TRUE, TRUE);
      if ($data['below']) {
        _elms_helper_toc_recurse($data['below'], $indent .'--', $toc, $exclude, $depth_limit);
      }
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function elms_helper_content_extra_fields($type_name) {
  $fields['spaces_preset'] = array(
    'label' => t('Spaces Presets'),
    'description' => t('Spaces type'),
    'weight' => 100,
  );
  $fields['purl'] = array(
    'label' => t('Purl'),
    'description' => t('Persistent URL textfield'),
    'weight' => 0,
  );
  $fields['themes'] = array(
    'label' => t('Themes'),
    'description' => t('Theme setting from OG'),
    'weight' => 1,
  );
  return $fields;
}

function elms_helper_elms_instructional_template() {
  $outline['default'] = array(
   'title' => 'Default Outline',
   0 => array(
     'type' => 'page',
     'title' => 'Lesson @i',
   ),
   1 => array(
     'type' => 'duplicate',
     'parent' => 0,
   ),
  );
  return $outline;
}

/**
 * Implementation of hook_ckeditor_link_autocomplete_alter().
 * take into account the space we're in currently and rewrite the results accordingly
 */
function elms_helper_ckeditor_link_autocomplete_alter(&$results, $string) {
  $results = array();
  //get current node to exclude self linking
  $nid = arg(1);
  //get current group to keep results in context
  $group = og_get_group_context();
  if ($string !== '') {
  //select anything that's in this group, not this page, and not a book root
    $sql = db_rewrite_sql("SELECT n.nid, n.title FROM {node} n JOIN {og_ancestry} og ON og.nid = n.nid JOIN {book} b ON b.nid=n.nid WHERE b.nid<>b.bid AND n.nid<>%d AND og.group_nid=%d AND n.title LIKE '%%%s%%' ORDER BY n.title, n.type");
    $result = db_query_range($sql, array($nid, $group->nid, $string), 0, 10);
    while ($node = db_fetch_object($result)) {
      $results['node/'. $node->nid] = check_plain($node->title);
    }
  }

  return $results;
}

/**
 * adds user target for role
 */

function elms_helper_feeds_user_processor_targets_alter(&$targets) {
  $targets['roles'] = array(
    'name' => t('Role ID'),
    'description' => t('Profile: @name', array('@name' => $record->title)),
    'callback' => 'elms_helper_feeds_set_target',
  );
}

/**
 * Set the user profile target after import.
 */
function elms_helper_feeds_set_target($account, $target, $value) {
  $account->{$target} = $value;
  return $account;
}
