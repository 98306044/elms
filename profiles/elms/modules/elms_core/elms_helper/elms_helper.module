<?php
// $Id: elms_helper.module

/**
 * @file
 * UX improvements for the ELMS experience that we want
 */
define('ELMS_VERSION', '6.x-1.0-alpha5');

/**
 * Implementation of hook_theme_registry_alter().
 */
function elms_helper_theme_registry_alter(&$vars) {
  //hijack the node tpl away from organic groups
  array_splice($vars['node']['theme paths'], 2, 0, drupal_get_path('module', 'elms_helper'));
}
/**
 * Implementation of hook_init().
 */
function elms_helper_init() {
  global $user;
  if (arg(2) == 'html_export' || arg(2) == 'check_links') {
    drupal_set_message(t('This is still in active development / future planned functionality.'),'warning');
  }
  drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/elms_helper.css','theme');
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/redmond/redmond.css','module');
  //account for possible og theme swap when using the outline designer
  if (arg(0) == 'outline_designer') {
    $book_node = node_load(arg(2));
    if (isset($book_node->og_groups)) {
      foreach($book_node->og_groups as $groupnid) {
        $group_node = node_load($groupnid);
      }
      if(og_is_group_type($group_node->type)){
        og_set_theme($group_node);
    $theme_settings = variable_get('theme_'. $group_node->og_theme .'_settings',array());
    //add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
    //add in custom css if this course has any
    if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], 'theme');
    }
        og_set_group_context($group_node);
        og_set_language($group_node);
      }
    }
  }
  //fixes glitch in other og projects where it forgets to set theme
  if(arg(0) == 'node') {
    $node = node_load(arg(1));
    if(og_is_group_type($node->type)){
      og_set_theme($node);
      $theme_settings = variable_get('theme_'. $node->og_theme .'_settings',array());
    //add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
    //add in custom css if this course has any
    if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], 'theme');
    }
      og_set_group_context($node);
      og_set_language($node);
    }
  else {
    $group = og_get_group_context();
	if (isset($group->type)) {
      $theme_settings = variable_get('theme_'. $group->og_theme .'_settings',array());
      //add in custom font setting, a none file exists too
	  if (isset($theme_settings['font'])) {
        drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css','theme');
	  }
      //add in custom css if this course has any
      if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
        drupal_add_css($theme_settings['extra_css_path'], 'theme');
      }
	}
  }
  }
}

/**
 * Implementation of hook_menu_alter()
 */
function elms_helper_menu_alter(&$items) {
  //link outline access argument to tracker one, that way it's hidden from IDs
  $items['node/%node/outline']['access callback'] = '_elms_helper_outline_tab';
  //remove some confusing pages from menu items
  $items['node/%/outline_designer']['type'] = MENU_CALLBACK;
  $items['og/activity']['type'] = MENU_CALLBACK;
  
  //add additional protection to user search functionality
  //we don't want ANYONE to be able to search for users
  //except for admins
 if (isset($items['search/user/%menu_tail'])) {
    $menu_item =& $items['search/user/%menu_tail'];
 
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
 
  if (isset($items['user/autocomplete'])) {
    $menu_item =& $items['user/autocomplete'];
 
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
}

/**
 * Access helper function to remove the outline tab from the group page
 */
function _elms_helper_outline_tab() {
  $group_node = node_load(arg(1));
  if(og_is_group_type($group_node->type)){
    return false;
  }
  return user_access('administer book outlines');
}

/**
 * Implementation of hook_form_alter()
 */
function elms_helper_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'version_node_form') {
    $nid = arg(3);
	if (isset($nid)) {
	  $node = node_load(arg(3));
	  $form['og_description']['#value'] = $node->field_description[0]['value'];
	}
    $form['#content_extra_fields']['spaces_preset']['weight'] = 8;
    $form['title']['#description'] = t('Name and number of the course');
    //unset rubik which is used for administering the site
    unset($form['themes']['rubik']);
    unset($form['themes']['theme']['#options']['rubik']);
    //unset default system theme
    unset($form['themes']['']);
    unset($form['themes']['theme']['#options']['']);
  }
  if ($form_id == 'user_profile_form') {
    //remove change theme from view even if they have the permission, gives us granularity so they can set it in the group / course creation
    $form['theme_select']['#access'] = FALSE;
    //contact form has been removed because the form should only be used for instructor to student and student to instructor, this walls students from contacting each other via the system. also reduces confusion as this isn't something they should want to turn off (need to communicate with instructor and visa versa)
    $form['contact']['#access'] = FALSE;
  }
  //form modifications for js to work
  if (strpos($form_id,'editview_node_form_') === 0) {
   $form['title']['#attributes']['class'] = 'editview_title';
   $form['field_due_date']['#attributes']['class'] = 'editview_date';
   $form['field_content_ref']['#attributes']['class'] = 'editview_nid';
   $form['field_task_link']['#attributes']['class'] = 'editview_task_link';
  }
}

/**
 * Implementation of hook_link_alter()
 */
function elms_helper_link_alter(&$links, $node, $comment = NULL) {
  //remove add book as it's confusing with outline designer in place
  if (isset($links['book_add_child'])) {
    unset($links['book_add_child']);
  }
  //shifts bookmarks if activated
  if (isset($links['flag-bookmarks'])) {
    $temp = $links['flag-bookmarks'];
    unset($links['flag-bookmarks']);
    array_unshift($links,$temp);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function elms_helper_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
  //if the user is viewing a page with no content and has children goto first child
      if ($node->type == 'folder' && $node->book['has_children'] == 1 && !strpos($_SERVER['SCRIPT_NAME'],'cron.php')) {
        $childobj = book_next($node->book);
    //if this user can't edit the node then skip it as we've already proven that it's blank
        if (!node_access('update',$node)) {
          $_REQUEST['destination'] = $childobj['link_path'];
        }
        else {
          drupal_set_message('This page will redirect to '. l(t($childobj['title']), $childobj['link_path']) .' for students.','elms-message');
        }
      }
  case 'prepare':
    if(isset($node->og_groups_both)) {
    //clean up the typically horrible drupal breadcrumbs based on group context and book path
    $breadcrumb = array();
    //calculate the group home
    foreach($node->og_groups_both as $key => $gname) {
      $breadcrumb[] = l(t('Course Home'), 'node/'. $key);
    }
    //get the book path in menu_link form
	if (isset($node->book)) {
      $book_path = book_build_active_trail($node->book);
      //first links are always frontpage and book-root
      array_shift($book_path);
      array_shift($book_path);
      //iterate each menu itema nd convert to valid breadcrumb
      foreach($book_path as $bookpage) {
        $breadcrumb[] = l(t($bookpage['title']),$bookpage['link_path']);
      }
	}
    drupal_set_breadcrumb($breadcrumb);
    }
    elseif(og_is_group_type($node->type)) {
    $breadcrumb = array();
      $breadcrumb[] = l(t('Course Home'), 'node/'. $node->nid);
        drupal_set_breadcrumb($breadcrumb);
    }
    break;
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function elms_helper_content_extra_fields($type_name) {
  $fields['spaces_preset'] = array(
    'label' => t('Spaces Presets'),
    'description' => t('Spaces type'),
    'weight' => 100,
  );
  $fields['purl'] = array(
    'label' => t('Purl'),
    'description' => t('Persistent URL textfield'),
    'weight' => 0,
  );
  $fields['themes'] = array(
    'label' => t('Themes'),
    'description' => t('Theme setting from OG'),
    'weight' => 1,
  );
  return $fields;
}

/**
 * Implementation of hook_ckeditor_link_autocomplete_alter().
 * take into account the space we're in currently and rewrite the results accordingly
 */
function elms_helper_ckeditor_link_autocomplete_alter(&$results, $string) {
  $results = array();
  //get current node to exclude self linking
  $nid = arg(1);
  //get current group to keep results in context
  $group = og_get_group_context();
  if ($string !== '') {
  //select anything that's in this group, not this page, and not a book root
    $sql = db_rewrite_sql("SELECT n.nid, n.title FROM {node} n JOIN {og_ancestry} og ON og.nid = n.nid JOIN {book} b ON b.nid=n.nid WHERE b.nid<>b.bid AND n.nid<>%d AND og.group_nid=%d AND n.title LIKE '%%%s%%' ORDER BY n.title, n.type");
    $result = db_query_range($sql, array($nid, $group->nid, $string), 0, 10);
    while ($node = db_fetch_object($result)) {
      $results['node/'. $node->nid] = check_plain($node->title);
    }
  }

  return $results;
}

/**
 * adds user target for role
 */

function elms_helper_feeds_user_processor_targets_alter(&$targets) {
  $targets['roles'] = array(
    'name' => t('Role ID'),
    'description' => t('Profile: @name', array('@name' => $record->title)),
    'callback' => 'elms_helper_feeds_set_target',
  );
}

/**
 * Set the user profile target after import.
 */
function elms_helper_feeds_set_target($account, $target, $value) {
  $account->{$target} = $value;
  return $account;
}
