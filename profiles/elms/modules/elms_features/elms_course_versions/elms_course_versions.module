<?php

include_once('elms_course_versions.features.inc');

/**
 * Implementation of hook_form_alter()
 */
function elms_course_versions_form_alter(&$form, &$form_state, $form_id) {
  //alter the version form
  if ($form_id == 'version_node_form') {
    //always hide purl, they shouldn't need to know anything about it, it just happens
    $form['purl']['value']['#type'] = 'hidden';
    //because purl wants a url, generate a temporary, random one
    //this has to be done because the nid hasn't been set yet and we can't submit the node until we have a PURL identifier yet the NID is supposed to be part of the address, once submitted the node will automatically change thing
    if (arg(1) == 'add') {
      $form['purl']['value']['#default_value'] = '_tmp_'. rand(1,1000);
      $form['themes']['theme']['#default_value'] = 'chamfer';
    }
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function elms_course_versions_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  //the group node makes no sense to load to users, redirect to the front-page
  switch ($op) {
	case 'view':
	if (og_is_group_type($node->type)) {
	  drupal_goto('<front>');
	}
	break;
	case 'insert':
	//check for groups created
    if (og_is_group_type($node->type)) {
	  //remove messages on course insert since this will redirect to the space to work
	  $_SESSION['messages'] = array();
	  //bump workflow state to dev automatically
	  workflow_execute_transition($node, 3);
      $space = spaces_load('og', $node->nid, TRUE);
      if ($space) {
        $space->controllers->variable->set('site_name', $node->title);
        //load the course node for the name space info
		$course = node_load($node->field_course_ref[0]['nid']);
        //set slogan to the description of the course
        $space->controllers->variable->set('site_slogan', $course->field_course_title[0]['value']);
		//set initial homepage to the content outline 
		$space->controllers->variable->set('site_frontpage', 'content');
		//set the initial path to the group created
		$space->controllers->variable->set('site_frontpage_path', 'node/'. $node->nid);
		//establish default theme settings
		$theme_ary = array();
		$space->controllers->variable->set('theme_settings', $theme_ary);
		//establish default theme settings for the selected theme
		$space->controllers->variable->set('theme_'. $node->og_theme .'_settings', $theme_ary);
		//turn on our default area as content
		$space->controllers->variable->set('spaces_features', array('elms_course_content' => 1));
		//set some defaults for the version as they might not be set in the node form
		if (isset($node->default_version)) {
		  $space->controllers->variable->set('spaces_preset_og', 'og_private');
		  $node->og_private = 1;
		}
		//set webaccess state for strict per course settings
		if (module_exists('webaccess')) {
          $space->controllers->variable->set('webaccess_secure_site', $node->og_private);
        }
		//build course root since all courses come with content by default
		//check for the default argument coming from the course creation form making a version
		if (!isset($node->default_version)) {
		  _elms_course_content_create_root($node, $node->field_instructional_template[0]['value']);
		}
		
        //need to do extra step with purl rewrite to ensure it has the node and course name in in
        $modifier = array(
          'value' => strtolower(str_replace(' ', '', $course->title)) .'_dev_'. $node->nid,
          'provider' => 'spaces_og',
          'id' => $node->nid,
        );
        purl_save($modifier);
      }
	  /*
	  TODO: Move this code into the schedule module so that it can build schedules from that feature
          //remove the current schedule and build a new one
          if (module_exists('elms_schedule') && ($node->field_schedule_to_build[0]['value'] != '')) {
            if ($node->field_schedule_to_build[0]['value'] == 'rebuild') {
              $batch_call = '_elms_schedule_rebuild_schedule';
              $batch_title = 'Mapping Schedule';
            }
          else {
            //select all course events attached to this group
            $result = db_query("SELECT {node}.nid FROM {og_ancestry} JOIN {node} ON {node}.nid = {og_ancestry}.nid WHERE group_nid=%d AND {node}.type='course_event'", $node->nid);
            while ($val = db_fetch_array($result)) {
              node_delete($val['nid']);
            }
            $batch_call = '_elms_schedule_build_schedule';
            $batch_title = 'Building Schedule';
          }
          $batch = array(
            'title' => t($batch_title),
            'progress_message' => t('Completed job @current of @total.'),
            'operations' => array(
              array($batch_call, array($node)),
              array('_elms_version_node_access_rebuild_batch_operation', array($node)),
            ),
            'init_message' => t('Loading schedule'),
            'error_message' => t('An error has occured'),
            'finished' => '_elms_version_duplicate_branch_finished',
          );
          batch_set($batch);
          batch_process('node/'. $node->nid .'/edit/4');
		  */
    }
	break;
	case 'delete':
	  //clean up all space overrides just to be safe
	  if (og_is_group_type($node->type)) {
        db_query("DELETE FROM {spaces_overrides} WHERE id=%d",$node->nid);
	  }
    break;
  }
}
