<?php

include_once('elms_navigation_left.features.inc');

//Copyright (C) 2011  The Pennsylvania State University
//
//Bryan Ollendyke
//bto108@psu.edu
//
//Keith D. Bailey
//kdb163@psu.edu
//
//12 Borland
//University Park,  PA 16802

/**
 * @file
 * Add a left side region to elms
 */

/**
 * Implementation of hook_define_region().
 */
function elms_navigation_left_define_regions() {
  $region['elms_navigation_left'] = array(
    'project' => 'elms_navigation_left',
    'js' => 'elms_navigation_left.js',
    'css' => 'elms_navigation_left.css',
  );
  return $region;
}

/**
 * Implementation of hook_form_alter().
 */
function elms_navigation_left_form_alter(&$form, &$form_state, $form_id) {
  //make the masquerade block display differently in the left hand menu to fit one line
  if ($form_id == 'masquerade_block_1') {
    $form['masquerade_user_field']['#size'] = 8;
  }
}

/**
 * Implementation of hook_block().
 */
function elms_navigation_left_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('System Level Navigation'),
      'weight' => 0,
      'status' => 0,
    );
    $blocks[1] = array(
      'info' => t('Course Level Navigation'),
      'weight' => 0,
      'status' => 0,
    );
    $blocks[2] = array(
      'info' => t('Actions Level Navigation'),
      'weight' => 0,
      'status' => 0,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    $group = og_get_group_context();
    switch ($delta) {
      case 0:
        $block['title'] = 'System';
        $block['content'] = _elms_navigation_left_system_block($group);
      break;
      case 1:
        if (isset($group->nid)) {
          $block['title'] = 'Course';
          $block['content'] = _elms_navigation_left_course_block($group);
        }
      break;
      case 2:
        if (isset($group->nid)) {
          $block['title'] = 'Page';
          $block['content'] = _elms_navigation_left_page_block();
        }
      break;
    }
    return $block;
  }
}

//helper function Page level tasks
function _elms_navigation_left_page_block() {
  $output = menu_local_tasks();
  //annoying but can't find a way into this layer at this time to add classes a good way
  $output = preg_replace('/<a/', '<a class="page_view"', $output, 1);
  $output = str_replace('/edit">', '/edit" class="page_edit">', $output);
  $output = str_replace('/accessibility">', '/accessibility" class="page_accessibility">', $output);
  $output = str_replace('/track">', '/track" class="page_track">', $output);
  
  $node = node_load(arg(1));
  if (isset($node->nid)) {
    //check for node reference url links
    $tmp_ref_links = nodereference_url_build_all_links($node, 0);
    $features = variable_get('spaces_features', array());
    //account for reactions not being active
    if (!isset($features['elms_reaction']) || !$features['elms_reaction']) {
      unset($tmp_ref_links['reaction_field_related_content']);
    }
    //account for atrium reader not being active
    if (!isset($features['atrium_reader']) || !$features['atrium_reader']) {
      unset($tmp_ref_links['feed_reader_field_associated_to']);
    }
    //if there are links then append them
    if (count($tmp_ref_links) != 0) {
      $output .= '<br/>';
      //loop through and add the links for contextual reference to this material
      foreach ($tmp_ref_links as $link) {
        $output .= theme('menu_item', l(t($link['title']), $link['href'], array($link['query'], $link['attributes'])), 0);
      }
    }
  }
  return $output;
}

//helper function Course level tasks
function _elms_navigation_left_course_block($group) {
  $output = '';
  //take into account active features
  $features = variable_get('spaces_features', array());
  //if course content active, add the outline designer link
  if ($features['elms_course_content'] == 1) {
    $output .= theme('menu_item', l(t('Content Outline'), 'outline_designer/book/'. $group->book_nid), 0, '', FALSE, 'content_outline');
  }
  /*
  //TODO: this is overkill so most is commented out at this time
  //loop through active features
  foreach ($features as $fname => $status) {
    //if it's active then see if we should add settings
    if ($status) {
      switch ($fname) {
        case 'elms_course_content':
          //course outline
          $output .= '<strong>Content</strong>';
          $output .= theme('menu_item', l(t('Content Outline'), 'outline_designer/book/'. $group->book_nid), 0, '', FALSE, 'content_outline');
          $output .= theme('menu_item', l(t('Settings'), 'node/'. $group->nid .'/features/elms_course_content', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'content_settings');
        break;
        case 'elms_reaction':
          //course outline
          $output .= '<strong>Reactions</strong>';
          $output .= theme('menu_item', l(t('Settings'), 'node/'. $group->nid .'/features/elms_reaction', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'reaction_settings');
        break;
        case 'elms_course_studio':
          //ELMS Reactions
          $output .= '<strong>Studio</strong>';
          $output .= theme('menu_item', l(t('Settings'), 'node/'. $group->nid .'/features/elms_course_studio', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'studio_settings');
        break;
        case 'elms_schedule':
          //ELMS Schedule
          $output .= '<strong>Schedule</strong>';
          $output .= theme('menu_item', l(t('Settings'), 'node/'. $group->nid .'/features/elms_schedule', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'schedule_settings');
        break;
      }
    }
  }*/
  //make the current workflow state as visible as possible
  //$output .= '<strong>Settings</strong>';
  $output .= theme('menu_item', l(t(workflow_get_state_name($group->_workflow)),  'node/'. $group->nid .'/workflow', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'workflow_state workflow_state_'. $group->_workflow);
  //change the features of the course
  $output .= theme('menu_item', l(t('Change Features'), 'node/'. $group->nid .'/features', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'change_features');
  //use the custom theme form
  $output .= theme('menu_item', l(t('Change Theme'), 'theme'), 0, '', FALSE, 'change_theme');
  //use the custom theme form
  $output .= theme('menu_item', l(t('Admin Settings'), 'node/'. $group->nid .'/edit', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'admin_settings');
  return $output;
}

//helper function System level tasks
function _elms_navigation_left_system_block($group = '') {
  $output = '';
  if (isset($group->nid)) {
    //Link back to the public Course Home
    $output .= theme('menu_item', l(t('Public Course Home'), 'node/'. $group->field_course_ref[0]['nid'], array('purl' => array('disabled' => TRUE))), 0, '', FALSE, 'public_home');
    //Create a new version of this course
    $output .= theme('menu_item', l(t('Create New Course Version'), 'node/add/version/'. $group->field_course_ref[0]['nid'], array('purl' => array('disabled' => TRUE))), 0, '', FALSE, 'new_course_version');
    //export html option
    //$output .= theme('menu_item', l(t('Export to HTML'), 'node/'. $group->nid .'/html_export', array('query' => 'destination='. $_GET['q'])), 0, '', FALSE, 'export_html');
  }
  else {
    $nid = arg(1);
    $node = node_load($nid);
    //see if this is a course landing page
    if ($node->type == 'course') {
      //create a new course
      $output .= theme('menu_item', l(t('Create New Course Version'), 'node/add/version/'. $node->nid, array('purl' => array('disabled' => TRUE))), 0, '', FALSE, 'new_course_version');
    }
  }
  //create a new course
  $output .= theme('menu_item', l(t('Create New Course'), 'node/add/course', array('purl' => array('disabled' => TRUE))), 0, '', FALSE, 'new_course');
  $output .= theme('menu_item', l(t('Create Sandbox'), 'node/add/version/', array('purl' => array('disabled' => TRUE))), 0, '', FALSE, 'new_sandbox');
  //activation code admin
  //$output .= theme('menu_item', l(t('Activation Code Admin'), 'activation_codes', array('purl' => array('disabled' => TRUE))), 0);
  //add in the masquerade block area
  if (module_exists('masquerade')) {
    $block = module_invoke('masquerade', 'block', 'view', 0);
    $output .= $block['content'];
  }
  return $output;
}
