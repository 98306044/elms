<?php

/**
 * Implementation of hook_node_export_alter().
 *
 * Maintain a relationship between nodes and their groups
 * (which are nodes themselves).
 */
function node_export_og_node_export_alter(&$nodes, $op) {
  if (module_exists('og')) {
    if ($op == 'export') {
      // Make sure each node has a UUID.
      foreach ($nodes as $node) {
        $uuid = uuid_get_uuid('node', 'nid', $data['nid']);
        // Create uuid if it doesn't exists
        if (empty($uuid)) {
          $uuid = uuid_set_uuid('node', 'nid', $data['nid']);
          $node->uuid = $uuid;
          node_save($node);
        }
      }

      // Go through nodes and set UUIDs for their groups.
      node_export_og_set_group_uuids($nodes);
    }
    elseif ($op == 'import') {
      // Now go through the groupes and switch back the UUIDS to actual ids.
      node_export_og_set_group_nids($nodes);
    }
  }
}

/**
 * Go through group nids and put group UUIDs in their place.
 */
function node_export_og_set_group_uuids(&$nodes) {
  foreach ($nodes as &$node) {
    if (!empty($node->og_groups)) {
      foreach ($node->og_groups as $key => $group_nid) {
        $group_uuid = uuid_get_uuid('node', 'nid', $group_nid);
        // Create uuid if it doesn't exists
        if (empty($group_uuid)) {
          $group_uuid = uuid_set_uuid('node', 'nid', $group_nid);
        }

        $node->og_groups[$group_uuid] = $group_uuid;
        unset($node->og_groups[$key]);
        // Modify og_groups_both as well (gid => title).
        $group_title = $node->og_groups_both[$group_nid];
        $node->og_groups_both[$group_uuid] = $group_title;
        unset($node->og_groups_both[$group_nid]);
      }
    }

    // Support for og_subgroups.
    if (!empty($node->og_parent)) {
      $group_uuid = uuid_get_uuid('node', 'nid', $node->og_parent->nid);
      // Create uuid if it doesn't exists
      if (empty($group_uuid)) {
        $group_uuid = uuid_set_uuid('node', 'nid', $node->og_parent->nid);
      }
      $node->og_parent = $group_uuid;
    }
  }
}

/**
 * Go through group UUIDs and put group nids in their place.
 */
function node_export_og_set_group_nids(&$nodes) {
  foreach ($nodes as &$node) {
    if (!empty($node->og_groups)) {
      foreach ($node->og_groups as $key => $group_uuid) {
        // If this is really a UUID, find the matching nid.
        if (uuid_is_valid($group_uuid)) {
          $group_nid = node_export_og_get_nid_by_uuid($group_uuid);
          $node->og_groups[$group_nid] = $group_nid;
          unset($node->og_groups[$key]);

          // Modify og_groups_both as well (gid => title).
          $group_title = $node->og_groups_both[$group_uuid];
          $node->og_groups_both[$group_nid] = $group_title;
          unset($node->og_groups_both[$group_uuid]);
        }
      }
    }

    // Support for og_subgroups.
    if (!empty($node->og_parent) && is_string($node->og_parent)) {
      // Create uuid if it doesn't exists
      if (uuid_is_valid($node->og_parent)) {
        $node->og_parent = node_export_og_get_nid_by_uuid($group_uuid);
      }
    }
  }
}

/**
 * Returns the nid associated with a UUID. Uses db_rewrite_sql() to ensure
 * node_access rules are preserved.
 *
 * Essentially a copy of node_get_by_uuid() that doesn't do a node_load()
 * at the end.
 *
 * @return
 *   Either the nid, or FALSE on failure.
 */
function node_export_og_get_nid_by_uuid($uuid) {
  $nid = db_result(db_query(db_rewrite_sql(
    "SELECT n.nid
     FROM {node} AS n
     INNER JOIN {uuid_node} AS un ON n.nid = un.nid
     WHERE un.uuid = '%s'"),
    $uuid
  ));

  if ($nid) {
    return $nid;
  }
  else {
    return FALSE;
  }
}
